<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace命名空间，作用就是对sql进行分类话管理，理解sql隔离
注意:使用mapper代理方法开发，namespace有特殊重要作用-->
<mapper namespace="user">
    <!--在映射文件中配置很多sql语句-->
    <!--通过select这些数据查询，id标识映射文件中的sql，将sql语句封装到mappedstatement对象中，所以讲id称为statement的id-->
    <!--
        parameterType：指定输入参数类型，这里指定int型
        #{}表示一个占位符
        #{id}：其中id表示接入输入参数，参数名就是id，如果输入参数是简单类型，#{}中的参数名就可以任意，可以value或其他名称
        resultType:指定sql输出结果的所映射的java对象类型，select指定resultType表示将单条记录映射成java对象
    -->
    <select id="findUserById" resultType="cn.zcp.demo.bean.User" parameterType="">
      select * from Blog where id = #{id}
    </select>

    <!--根据用户模糊查询
    resultType:指定就是单条记录所映射的Java对象，类型
    ${}:表示拼接sql串，将接收到参数的内容不加任何修饰拼接在sql中【隐患：sql注入,不建议使用】
    ${value}：接收输入参数的内容，如果输入参数是简单的类型，${}中只能使用value
    -->
    <select id="findUserByName" parameterType="java.lang.String" resultType="cn.zcp.demo.bean.User" >
        select * from t_user where name like '%${value}%'
    </select>

    <!--
        parameterType:指定输入参数类型是bean(包括用户信息)
        #{}中指定bean的属性名，接收到pojo对象的属性值，mybatis通过ognl获取对象的属性值
    -->
    <insert id="insertUser" parameterType="cn.zcp.demo.bean.User" >
        insert into t_user(name,age) value(#{name},#{age})

    </insert>

    <!--
        将插入数据的主键返回，返回到user对象中
        LAST_INSERT_ID:将insert进去记录的主键值，只适用于自增主键

        keyProperty：将查询到主键值设置到parameterType指定的对象的哪个属性
        order：select LAST_INSERT_ID()执行顺序，相当于insert语句来说它的执行顺序
        resultType:指定结果类型
    -->
    <insert id="insertUser1" parameterType="cn.zcp.demo.bean.User" >
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID()
        </selectKey>
        insert into t_user(name,age) value(#{name},#{age})

    </insert>

    <!--
        适用MYSQL的UUID生成主键
        执行顺序：首先通过uuid()生成uuid，然后设置到User
    -->
    <insert id="insertUser2" parameterType="cn.zcp.demo.bean.User" >
        <selectKey keyProperty="id" order="BEFORE" resultType="java.lang.Integer">
            select uuid()
        </selectKey>
        insert into t_user(id,name,age) value(#{id},#{name},#{age})
    </insert>

    <!--通过oracle的序列生成主键-->
    <insert id="insertUser3" parameterType="cn.zcp.demo.bean.User" >
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select 序列名.nextval()
        </selectKey>
        insert into t_user(name,age) value(#{name},#{age})

    </insert>

    <!--删除用户
        根据Id删除用户，需要输入Id值

    -->
    <delete id="deleteUserById" parameterType="java.lang.Integer">
        delete from t_user where id=#{id}
    </delete>

    <!--根据id更新用户
        分析:需要传入用户的id，需要传入用户信息
        parameterType指定User对象，包括id和更新信息，注意id必须存在
        #{id}:从输入User对象中获取id属性值
    -->
    <update id="updateUser" parameterType="cn.zcp.demo.bean.User">

        update t_user set name=#{name} where id=#{id}
    </update>


</mapper>