<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>
    <!--加载属性文件-->
    <properties resource="db.properties">
        <!-- 也可以在这里添加一些属性配置-->
        <!--<property name="" value=""></property>-->
    </properties>

    <!--全局参数 , 一般设置运行参数,需要才设置,一般mybatis会自动帮优化-->
    <settings>
        <setting name="logImpl" value="LOG4J"/>
    </settings>

    <!--定义别名-->
    <typeAliases>
        <!--定义个别-->
        <typeAlias type="cn.zcp.demo.bean.User" alias="user"/>
        <!--批量定义别名，指定包名，mybatis自动扫描包中的po类，自动定义别名，别名就是类名（首字母大小写都可以）-->
        <package name="cn.zcp.demo.bean"/>
    </typeAliases>

    <!--类型处理器,mybatis中通过typeHandlers完成jdbc类型和java类型的转换
        通产情况下，mybatis提供的类型处理类型满足日常开发的需求，不需要额外定义-->
    <typeHandlers>
        <typeHandler handler="cn.zcp.demo.typehandle.MyTypeHandle" javaType="String" jdbcType="VARCHAR"/>
        <!--<package name="xxxx"/>也可以使用包扫描自定义类型处理器-->
    </typeHandlers>

    <!--对象工厂-->
    <!--<objectFactory type=""/>-->

    <!--插件-->
    <plugins>
        <plugin interceptor="cn.zcp.demo.plugin.MyPlugin">
            <property name="someProperty" value="100"/>
        </plugin>
    </plugins>

    <!--和Spring整合后environments配置将废除（没有必要配置事务管理器， 因为 Spring 模块会使用自带的管理器来覆盖前面的配置。）
        可以配置多个environment,定义好Id,可以设置默认使用的数据源,也可以通过::
        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment);
        SqlSessionFactory factory = new SqlSessionFactoryBuilder().build(reader, environment, properties);

        如果未传environment参数,则使用默认配置
    -->
    <environments default="development">  <!--设置默认使用数据源-->
        <environment id="development">
            <!--使用jdbc事物管理，事物控制由mybatis管理-->
            <transactionManager type="JDBC"/>
            <!--
            有三种内建的数据源类型（也就是 type=”[UNPOOLED|POOLED|JNDI]”）：

            UNPOOLED– 这个数据源的实现只是每次被请求时打开和关闭连接。虽然有点慢，但对于在数据库连接可用性方面没有太高要求的简单应用程序来说，是一个很好的选择。 不同的数据库在性能方面的表现也是不一样的，对于某些数据库来说，使用连接池并不重要，这个配置就很适合这种情形。UNPOOLED 类型的数据源仅仅需要配置以下 5 种属性：

            POOLED– 这种数据源的实现利用“池”的概念将 JDBC 连接对象组织起来，避免了创建新的连接实例时所必需的初始化和认证时间。 这是一种使得并发 Web 应用快速响应请求的流行处理方式。

            JNDI – 这个数据源的实现是为了能在如 EJB 或应用服务器这类容器中使用，容器可以集中或在外部配置数据源，然后放置一个 JNDI 上下文的引用。这种数据源配置只需要两个属性：

            具体配置可以查看官网:http://www.mybatis.org/mybatis-3/zh/configuration.html#objectFactory
             -->
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
        <!--配置测试环境数据源-->
        <environment id="test">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${jdbc.driver}"/>
                <property name="url" value="${jdbc.url}"/>
                <property name="username" value="${jdbc.username}"/>
                <property name="password" value="${jdbc.password}"/>
            </dataSource>
        </environment>
    </environments>
    <!--
        映射器
    -->
    <mappers>
        <!--单个映射文件加载-->
        <mapper resource="sqlmap/User.xml"/>
        <mapper resource="mapper/UserMapper.xml"/>

        <!--通过mapper接口加载映射文件-->
        <!--遵循规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中-->
        <!--上边规范的前提是：使用的是mapper代理方法-->
        <!--<mapper class="cn.zcp.demo.mapper.UserMapper"/>-->

        <!--批量加载mapper，指定mapper接口的包名，mybatis自动扫描包下边所有mapper接口进行加载-->
        <!--遵循规范：需要将mapper接口类名和mapper.xml映射文件名称保持一致，且在一个目录中-->
        <!--<package name="cn.zcp.demo.mapper"/>-->
    </mappers>
</configuration>

<!--
    需求：将数据连接参数单独配置在db.properties中,只需要在config文件中引用(原因：方便参数进行统一管理，其他xml可以引用)
    properties特性: 注意有加载顺序   properties文件->properties子标签->parameterType
    typeAliases:可以自定义别名，以便在parameterType和resultType中使用，有默认别名
-->















